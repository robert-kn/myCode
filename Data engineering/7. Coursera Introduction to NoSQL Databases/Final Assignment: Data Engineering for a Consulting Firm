You are a data engineer at a data analytics consulting company. Your company prides itself in being able to efficiently handle data in any format on any database on any platform. Analysts in your office need to work with data on different databases, and data in different formats. While these analysts are good at analyzing data, they count on you to be able to move data from external sources into various databases, to be able to move data from one type of database to another, and be able to run basic queries on various databases.

Objectives
In this assignment you will:

Import data into a MongoDB database.
Query data in a MongoDB database.
Export data from MongoDB.
Import data into a Cassandra database.
Query data in a Cassandra database.

Set-up: Start MongoDB

In MongoDB CLI (the mongo shell), switch the context to the training database.

use training

Create a collection called bigdata

db.createCollection("bigdata")

Set-up: Start Cassandra

Exercise 1: Working with a MongoDB database

Download sample data file

Use the following command to download the data file in your Cloud IDE project directory.

curl -O https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMSkillsNetwork-DB0151EN-edX/labs/FinalProject/movies.json

Task 1: Import movies.json into mongodb server into a database named entertainment and a collection named movies

mongoimport -u root -p otI1TddT0ZtaAHddoGji75Bu --authenticationDatabase admin --db entertainment --collection movies --file movies.json --host mongo

Assessment: Take a screen capture of the output and save the screen capture as 01-mongo-import.png (Save the images using either a .jpg or .png extension).

Task 2: Write a mongodb query to find the year in which most number of movies were released

db.movies.aggregate([ { "$group": { "_id": "$year", "moviecount": { "$sum": 1 }}}, {"$sort":{"moviecount":-1}}, {$limit:1}])

Task 3: Write a mongodb query to find the count of movies released after the year 1999

db.movies.countDocuments({year: {$gt: 1999}})

Task 4: Write a query to find out the average votes for movies released in 2007

db.movies.aggregate([{$match: {year:2007}}, { "$group": { "_id": "$year", averageVotes: { "$avg": "$Votes" }}}])

Task 5: Export the fields _id, title, year, rating and director from the movies collection into a file named partial_data.csv

mongoexport -u root -p otI1TddT0ZtaAHddoGji75Bu --authenticationDatabase admin --db entertainment --collection movies --fields "_id,title,year,rating,director" --type=csv --out partial_data.csv --host mongo

Exercise 2 - Working with a Cassandra database

Download sample data file

If you haven't managed to successfully export data into partial_data.csv file, then download the data file lready created for you with the following command.

curl -O https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMSkillsNetwork-DB0151EN-edX/labs/FinalProject/partial_data.csv

Task 6 - Create a keyspace named entertainment

Once created, use the describe command and use the output for assessment.

Assessment: Take a screen capture of the output and save the screen capture as 06-describe-keyspaces.png (You can save the image using either the .jpg or .png extension).

Task 7 - Import partial_data.csv into cassandra server into a keyspace named entertainment and a table named movies

use entertainment

create table movies( id varchar PRIMARY KEY, title text, year int, rating text, director text);

copy entertainment.movies(id,title,year,rating,director) from 'partial_data.csv' with delimiter=',' and header=TRUE;

Task 8 - Write a cql query to count the number of rows in the movies table

Assessment: Take a screen capture of the output and save the screen capture as 07-movies-imported.png (You can save the image using either the .jpg or .png extension).

Task 8 - Write a cql query to count the number of rows in the movies table

select count(*) from movies;

Assessment: Take a screen capture of the output and save the screen capture as 08-movies-count.png You can save the image using either the.jpg or .png extension).

Task 9 - Create an index for the rating column in the movies table using cql

And then run the describe on movies that shows CREATE INDEX listed in the output.

Take a screenshot of the command you used and the output.

create index rating_index on movies(rating);

Assessment: Take a screen capture of the output and save the screen capture as 09-movies-rating-index.png (You can save the image using either the .jpg or .png extension).

Task 10 - Write a cql query to count the number of movies that are rated 'G'.

select count(*) from movies where rating='G';

Assessment: Take a screen capture of the output and save the screen capture as 10-g-rated-movies.png (You can save the image using either the.jpg or .png extension).