Scenario

You've been tasked by your team to create an automated Extract, Transform, Load (ETL) process to extract daily weather forecast and observed weather data and load it into a live report to be used for further analysis by the analytics team. As part of a larger prediction modelling project, the team wants to use the report to monitor and measure the historical accuracy of temperature forecasts by source and station.

As a proof-of-concept (POC), you are only required to do this for a single station and one source to begin with. For each day at noon (local time), you will gather both the actual temperature and the temperature forecasted for noon on the following day for Casablanca, Morocco.

At a later stage, the team anticipates extending the report to include lists of locations, different forecasting sources, different update frequencies, and other weather metrics such as wind speed and direction, precipitation, and visibility.

Data source

For this practice project, you'll use the weather data package provided by the open source project wttr.in, a web service that provides weather forecast information in a simple and text-based format. For further information, you can read more about the service on its GitHub Repo.

First, you'll use the curl command to scrape weather data via the wttr.in website. For example, to get data for Casablanca, enter:

curl wttr.in/casablanca

which prints the following to stdout

Learning Objectives

After completing this practice project, you will be able to apply your new shell scripting skills in a real-world scenario to:

Download raw weather data
Extract data of interest from the raw data
Transform the data as required
Load the data into a log file using a tabular format
Schedule the entire process to run automatically at a set time daily

Overview
Weather reporting tasks

You must extract and store the following data every day at noon, local time, for Casablanca, Morocco:

The actual temperature (in degrees Celsius)
The forecasted temperature (in degrees Celsius) for the following day at noon
Here is an example of what the the resulting weather report should look like:

year	month	day	obs_tmp	fc_temp
2023	1	    1	10	    11
2023	1	    2	11	    12
2023	1	    3	12	    10
2023	1	    4	13	    13
2023	1	    5	10	    9
2023	1	    6	11	    10
(table 1)

Exercise 1 - Initialize your weather report log file

1.1 Create a text file called rx_poc.log

This will be your POC weather report log file, simply a text file which contains a growing history of the daily weather data you will scrape. Each entry in the log file corresponds to a row as in Table 1.

touch rx_poc.log

1.2 Add a header to your weather report.
Your header should consist of the column names from Table 1, delimited by tabs. Write the header to your weather report.

header=$(echo -e "year\tmonth\tday\thour\tobs_tmp\tfc_temp")
echo $header>rx_poc.log

Exercise 2 - Write a bash script that downloads the raw weather data, and extracts and loads the required data

2.1. Create a text file called rx_poc.sh and make it a bash script.

#! /bin/bash

chmod u+x rx_poc.sh

2.2 Download today’s weather report from wttr.in

Tip: It’s good practice to keep a copy of the raw data you are using to extract the data you need.

By appending a date or time stamp to the file name, you can ensure it’s name is unique.
This builds a history of the weather forecasts which you can revisit at any time to recover from errors or expand the scope of your reports
Using the prescribed date format ensures that when you sort the files, they will be sorted chronologically. It also enables searching for the report for any given date.
If needed, you can compress and archive the files periodically. You can even automate this process by scheduling it.

Follow the steps below to download and save your report as a datestamped file named raw_data_<YYYYMMDD>, where <YYYYMMDD> is today’s date in Year, Month, Day format.

2.2.1 Create the filename for today’s wttr.in weather report

today=$(date +%Y%m%d)
weather_report=raw_data_$today

2.2.2 Download the wttr.in weather report for Casablanca and save it with the filename you created

city=Casablanca
curl wttr.in/$city --output $weather_report

2.3. Extract the required data from the raw data file and assign them to variables obs_tmp and fc_temp.

Extracting the required data is a process that will take some trial and error until you get it right.
Study the weather report you downloaded, and determine what you need to extract. Look for patterns.
You must find a way to ‘chip away’ at the weather report:

Use shell commands to extract only the data you need (the signal)
Filter everything else out (the noise)
Combine your filters into a pipeline (recall the use of pipes to chain filters together)

Tip: We introduce three more simple filters here that you will find very useful for your data extraction strategy.

tr - trim repeated characters to a single character.

For example, to remove extra spaces from text:

echo "There are    too    many spaces in this    sentence." | tr -s " "

xargs - can be used to trim leading and trailing spaces from a string.

For example, to remove the spaces from the begining and the end of text:

echo " Never start or end a sentence with a space. " | xargs 

rev - reverse the order of characters on a line of text.

echo ".sdrawkcab saw ecnetnes sihT" | rev

Let’s now return to extracting the temperature data of interest.

Extract only those lines that contain temperatures from the weather report, and write your result to file.

Use grep and redirect the result to file.

grep °C $weather_report > temperatures.txt

2.3.1. Extract the current temperature, and store it in a shell variable called obs_tmp

Which line is the current temperature on?

Is there a character you can use as a delimiter to appropriately parse the line into fields?

What about any leading or trailing white space?

obs_tmp=$(head -1 temperatures.txt | tr -s " " | xargs | rev | cut -d " " -f2 | rev)

2.3.2. Extract tomorrow’s temperature forecast for noon, and store it in a shell variable called fc_tmp

Provided you understand the previous pipeline, you will be able to solve this problem through experimentation.

fc_temp=$(head -3 temperatures.txt | tail -1 | tr -s " " | xargs | cut -d "C" -f2 | rev | cut -d " " -f2 | rev)

2.4. Store the current hour, day, month, and year in corresponding shell variables

hour=$(TZ='Morocco/Casablanca' date -u +%H) 
day=$(TZ='Morocco/Casablanca' date -u +%d) 
month=$(TZ='Morocco/Casablanca' date +%m)
year=$(TZ='Morocco/Casablanca' date +%Y)

2.5. Merge the fields into a tab-delimited record, corresponding to a single row in Table 1.

record=$(echo -e "$year\t$month\t$day\t$hour\t$obs_tmp\t$fc_temp")
echo $record>>rx_poc.log


Full solution

#! /bin/bash

# create a datestamped filename for the raw wttr data:
today=$(date +%Y%m%d)
weather_report=raw_data_$today

# download today's weather report from wttr.in:
city=Casablanca
curl wttr.in/$city --output $weather_report

# use command substitution to store the current day, month, and year in corresponding shell variables:
hour=$(TZ='Morocco/Casablanca' date -u +%H) 
day=$(TZ='Morocco/Casablanca' date -u +%d) 
month=$(TZ='Morocco/Casablanca' date +%m)
year=$(TZ='Morocco/Casablanca' date +%Y)

# extract all lines containing temperatures from the weather report and write to file
grep °C $weather_report > temperatures.txt

# extract the current temperature 
obs_tmp=$(head -1 temperatures.txt | tr -s " " | xargs | rev | cut -d " " -f2 | rev)

# extract the forecast for noon tomorrow
fc_temp=$(head -3 temperatures.txt | tail -1 | tr -s " " | xargs | cut -d "C" -f2 | rev | cut -d " " -f2 |rev)

# create a tab-delimited record
# recall the header was created as follows:
# header=$(echo -e "year\tmonth\tday\thour_UTC\tobs_tmp\tfc_temp")
# echo $header>rx_poc.log

record=$(echo -e "$year\t$month\t$day\t$obs_tmp\t$fc_temp")
# append the record to rx_poc.log
echo $record>>rx_poc.log