During this course, you will get an overview of the types of tasks involved in database management and see what a typical workday for a Database Administrator (DBA) looks like, revolving around various activities ranging from designing databases to planning and troubleshooting errors. You will gain hands-on experience learning about server objects, configurations, and database objects, including schemas, tables, triggers, and events.

The ability to respond quickly to system failures, corruption, and catastrophic events is a key part of any DBA's job. Crucial to this is the ability to recover data that has been lost, so you will learn to backup and recover databases and define backup and recovery policies and procedures through hands-on labs. 

Security of data and databases is critical for any organization. To help ensure data is secure, you'll learn about database security and user management, including creating and resetting user passwords, creating groups, and more.

Ongoing monitoring and optimization of databases are essential tasks that enable DBAs to respond to issues before they become problems. Course topics include creating and keeping baselines, performance metrics, standards, and finally, monitoring RAM and disk usage, connections, and cache stats. You will learn about database optimization, including updating statistics, addressing slow queries, and creating indexes.

In this course, you'll explore some basic troubleshooting processes that help data engineers find frequently occurring issues, such as connectivity, login, configuration, and whether the instance is running.

Being able to automate processes is a skill that enables DBAs to make database administration easier. You can automate many functions, from managing alerts to generating and sending reports. You can create these automation tasks using standard Linux and Unix shell commands or cron jobs. 

This course uses a free, cloud-based environment where you complete hands-on labs that enable you to apply the knowledge you learned during this course.

Course prerequisites include basic knowledge of relational databases and SQL fundamentals. Understanding the Linux command line interface and how to use shell commands will also benefit you during the final modules of the course.

database management lifecycle: see lifecycle-1 lifecycle-2 lifecycle-3 A database model represents the design of a database: which instance contains which databases and tables, how the tables relate to each other, how users access the data, and so on. DBAs model the databases and their objects with the help of Entity Relationship Diagrams or ERDs. In self-managed environments such as on-premise databases, DBAs also need to consider size, capacity, and growth. They determine appropriate server resources like storage space, memory, processing power, and log file size. They also need to plan for how database objects are physically stored. For example, DBAs can choose to store frequently used data on a high-speed disk array or to store indexes separately from the data for better performance. In the implementation stage, DBAs roll out the carefully planned design. Creation of database objects like instances, databases, tables, views, and indexes. Configuring database security, granting access for database users, groups, and roles, so database objects are accessible only by the specific users and applications authorized to access them. Automation of repeating database tasks such as backups, restores, and deployments to improve efficiency. In populating the database, data might be imported from other databases, or data might be exported based on a query from a different source, or migrate projects from one environment to another, such as moving a project from the Application Development environment to the Production environment. lifecycle-4 lifecycle-5 lifecycle-6 

Data Security, Ethical and Compliance Considerations

As a database administrator (DBA), one of the most important parts of your role is to safeguard the data in the system. You control the system, so you are responsible for ensuring that the data is secure and complies to all relevant standards. You must also hold yourself to the highest ethical standards. Some organizations include a specific database security administrator role that focuses on these duties, but all DBAs need to keep them in mind.

A foundation of basic ethical concepts supports good data security practices. These should help guide the policies and workflows you create and the actions you take. Some important concepts are:

Transparency: When you collect information, you should tell the owners of the information exactly what data you will collect and what you will do with it. Inform them about how you use the data, how you store it, who will have access to it, and how you will dispose of it when you have finished using it.

Consent: You should get clear consent from data owners before you collect their data. This should detail what data you will be allowed to collect and how you will be allowed to use it.

Integrity: Always be clear about your procedures and policies, and always follow them consistently. As far as you can, make sure that others in your organization also follow the correct procedures and policies.

Consider creating a code of ethics–a written statement of security-related standards and intentions. You can include priorities, best practices, who will be responsible, and whatever else is important to understand clearly. This will create shared expectations for yourself and others, which will help build trust and make it easier for everyone to follow correct procedures.

Secure System Design

The structure of your system is a powerful tool in keeping your data safe. If your system is built to maintain security, it’s much easier to prevent breaches. To make sure your system works for you, consider these factors.

Protection from malicious access: The front line of protection for your data is basic software security. Your firewall and other cybersecurity tools should actively prevent hacking and malware installation, and alert you to threats. Be sure you update this software frequently, to keep scanning lists up to date. Also, educate users about phishing and other ways that they can unwittingly enable malicious access.
Secure storage: The storage you choose for your data must be secure not only from malicious access, but also from hardware failure and even natural disasters. Select your services carefully and make sure you understand their security practices and disaster preparedness plans. Back up your data regularly and reliably to minimize data loss in case of an emergency.
Accurate access: Only those who need certain data should be able to access it. Establish a system of assigning and tracking privileges that assigns each user only the necessary privileges, and controls what they can do with the data. Ensure that your policy complies with any data usage agreements you have made.
Secure movement: Data can be particularly vulnerable to interception when you move it into or out of storage. Be sure to consider safe transfer methods as carefully as you plan safety for the rest of your system.
Secure archiving: At some point, you may want to move data from active storage to an archive. This can protect it from accidental access and make your system more efficient. Make sure your archiving system is as secure as the rest of your storage. Data agreements often specify how long you may use the data, so be sure the archived data is regularly weeded for expired rights and don’t retain any more data than you will need for compliance with organization policy. Eliminate your discarded data securely and completely.

Compliance Issues
Maintaining compliance with all relevant laws and standards is a vital concern. Failure can result in data insecurity, professional censure for your organization, and even legal action. This list includes some of the most common types of standards, but it’s not exhaustive; always find out which regulations and standards apply to your organization.

National/international regulations: Many industries must be concerned with important legal standards on the national or international level. Some examples include HIPAA regulations for health-related information in the US, the GDPR in Europe, and the Information Technology Act, 2000 in India.
Industry standards: Some data standards aren’t enforced by law but can still carry repercussions for your organization’s reputation and standing if they aren’t followed. An example might be the Payment Card Industry Data Security Standard (PCI DSS), which applies to any organization that collects, stores, or transmits cardholder data.
Organization best practices: Each organization will formulate standards for handling its internal data; as a DBA, you may work on that as part of your job. Employee confidentiality is often an important part of these policies, as is protecting intellectual property owned by the organization.
If you build your system and procedures thoughtfully and maintain them with consistency and vigilance, you can keep the data in your system safe and productive.

Database objects: Relational Database Management Systems (RDBMSes) contain many objects that database engineers and database administrators must organize. Storing tables, constraints, indexes, and other database objects in a hierarchical structure allows DBAs to manage security, maintenance, and accessibility. see database-objects-1 Some RDBMSes consider the schema a parent object of a database, and others consider it a database object. An instance is a logical boundary for a database or set of databases where you organize database objects and set configuration parameters. Every database within an instance is assigned a unique name, has its own set of system catalog tables (which keep track of the objects within the database) and has its own configuration files. 

You can create more than one instance on the same physical server, providing a unique database server environment for each instance. The databases and other objects within one instance are isolated from those in any other instance. You can use multiple instances when you want to use one instance for a development environment and another instance for a production environment, restrict access to sensitive information, or control high-level administrative access. database-objects-2

Not all RDBMSes use the concept of instances, often managing database configuration information in a special database instead. In Cloud-based RDBMSes, the term instance means a specific running copy of a service.

A schema is a specialized database object that provides a way to group other database objects logically. A schema can contain tables, indexes, constraints, and other objects. When you create a database object, you can assign it to a schema. In most RDBMSes, the default schema is the user schema for the currently logged-on user. Many RDBMSes use a specialized schema to hold configuration information and metadata about a particular database. database-objects-3

Database objects are the items that exist within the database. The process of database design includes defining database objects and their relationships with each other. You can create and manage database objects through graphical database management tools, scripting, or accessing the database through an API. If you use SQL to create or manage the object, you will use Data Definition Language statements like CREATE or ALTER. see database-objects-4

system objects and database configuration: Whether you are trying to find out if new indexes are helpful, the transaction count on a database at a specific time, or who’s connected to the database at any given time, data that allows you to know how your databases are performing is crucial. RDBMSes store information about their databases, known as metadata, in special databases, schemas, or catalogs. They store specific types of information about the database, such as the name of a database or table, the data type of a column, or access privileges, known as metadata. see system-objects-1

The RDBMS controls and updates the system objects, but you can query the metadata tables to discover information about the objects in the database.  Different RDBMSes use different names for their metadata stores system-objects-2. PostgreSQL uses the system catalog, which is a schema with tables and views that contain metadata about all the other objects inside the database, and more. With it, you can discover when various operations happen, how tables or indexes are accessed, and whether the database system is reading information from memory or needing to fetch data from disk.

During any database installation, you supply parameters like the location of the data directory, the port number that the service listens on for connections, memory allocation, and much more. You can accept the default options or supply custom values to suit the environment. The database installation process saves this information into files, known as configuration or initialization files. The database uses the information in these files to set parameters as it starts up. Again, different RDBMSes use different files, file locations, and settings. system-objects-3. Still, they all serve the same purpose: to provide the initial configuration information for the database as it starts up and operates. Configuration information can include general settings like the location of data and log files, and the port the server listens on for requests. Or configuration information can be more focused, like settings that affect performance, including memory allocation, a connection timeout, and the maximum packet size. system-objects-4

Suppose you want to modify these parameters after the database has started. In an on-premises RDBMS, you stop the database service, modify the file, and then restart the service, causing the database to read the modified settings. In a Cloud-based RDBMS, you select configuration options as you create the database. One advantage of Cloud-based systems is that you can scale many configuration options, such as storage size and compute power, through a graphical interface as the service is running. You don’t have to edit configuration files. system-objects-5

database storage: As a DBA, you'll be responsible for ensuring that your database has enough storage space for all the data it needs to store. You must determine the capacity required for the database and plan for growth. In cloud-based databases expanding your storage space is performed through an API or a Graphical Console. One of the advantages of using a cloud-based database is that it is so easy to scale up and scale down in terms of storage space. In a self-managed or on-premises environment, you can also plan storage space for improved performance, storing competing resources on different disks.

RDBMSes separate the physical storage of database files on disk from the logical design of the database, allowing more flexibility in managing the data files. You can manage the data through a logical object without being concerned about the nature of the physical storage. For example, you can issue a command to back up a database without having to specify all the physical disks that store the database. 

Tablespaces are structures that contain database objects such as tables, indexes, large objects, and long data. DBAs use tablespaces to logically organize database objects based on where their data is stored. Tablespaces define the mapping between logical database objects and the physical storage containers that house the data for these objects. A storage container can be a data file, a directory, or a raw device. Tablespaces can contain one or more database objects. In this example, Tablespace 1 contains multiple small tables, whereas Tablespace 2 only houses a single large table. Tablespace 3 contains frequently used indexes. DBAs configure one or more storage containers to store each tablespace. system-objects-6

By using the combination of tablespaces and containers, you can keep logical database storage separate from physical storage and manage the disk layout of a database and its objects. This results in several benefits: Performance: You can use tablespaces to optimize performance. For example, you can place a heavily used index on a fast SSD. Alternatively, you can store tables containing rarely accessed or archived data on a less expensive but slower magnetic hard drive. Recoverability: Tablespaces make backup and restore operations more convenient. Using a single command, you can make a backup or restore all the database objects without worrying about which storage container each object or tablespace is stored on. system-objects-7

Some RDBMSes provide Storage Groups. A storage group is a grouping of storage paths or containers based on similar performance characteristics. This allows you to perform Multi-Temperature Data Management more easily. In this context, temperature refers to the frequency of data access. Hot data is accessed very frequently, Warm data is accessed somewhat frequently, and Cold data is accessed infrequently. By using storage groups, you can organize your data and storage based on temperature. In this example, very frequently accessed hot tables can be placed in Tablespace H, which is distributed on a group of fast storage devices. Somewhat frequently accessed tables in Tablespaces W1 and W2 can be stored on a Warm Storage Group. And the least frequently accessed tables in Tablespace C can be stored on slower and  less expensive storage devices in a Cold Group. Using storage groups helps with optimizing performance for frequently accessed data and reducing costs for storing infrequently accessed data. see system-objects-8

A partitioned relational database is a relational database whose data is managed across multiple database partitions. You can partition tables that need to contain very large quantities of data into multiple logical partitions, with each partition containing a subset of the overall data. Database partitioning is used in scenarios that involve very large volumes of data, such as data warehousing and data analysis for business intelligence. see system-objects-9

see storage engines in MYSQL

see MySQL Storage Engines and System Tables

see PostgreSQL Instance Configuration and System Catalog

