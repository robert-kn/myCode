Questions:

Q1. Run process-run.py with the following flags: -l 5:100,5:100. What should the CPU utilization be (e.g., the percent of time the CPU is 
in use?) Why do you know this? Use the -c and -p flags to see if you were right.

should be 100% because all of the instructions in the two processess are supposed to run on the CPU. Using the flags -c -p proves 
instructions

Q2. Now run with these flags: ./process-run.py -l 4:100,1:0. These flags specify one process with 4 instructions (all to use the CPU), and 
one that simply issues an I/O and waits for it to be done. How long does it take to complete both processes? Use -c and -p to find out 
if you were right.

it will take 10 clock ticks to complete both processes. first process will complete in 4 clock ticks as only the cpu is being used. second
process will complete in 6 clock ticks; 1 clock tick to issue the io instruction and 5 clock ticks to wait for it run to completion.

okay so the above answer was close except you failed to account for the clock tick it takes for the process to return as done after the 
io operation is finished.

Q3. Switch the order of the processes: ./process-run.py -l 1:0,4:100. What happens now? Does switching the order matter? Why? (As 
always, use -c and -p to see if you were right)

I do not think that switching the order matters because the IO instrcution will still require 5 clock ticks to complete and return. 
Therefore, i expect that both processes will take 11 clock ticks to terminate.

okay so i was totally wrong when i speculated that switching order would not have any effect on the execution time. it does!! By running
the io process first, the second process is able to run immeadiately after the first process goes into blocked state. since the first 
process only needs 4 clock ticks to complete, the cpu state will only remain inactive for 1 clock tick whilst the io operation finalises.
this means that both processes complete in 7 clock ticks.

Q4. Weâ€™ll now explore some of the other flags. One important flag is -S, which determines how the system reacts when a process issues an 
I/O. With the flag set to SWITCH ON END, the system will NOT switch to another process while one is doing I/O, instead waiting until 
the process is completely finished. What happens when you run the following two processes (-l 1:0,4:100 -c -S SWITCH ON END), one doing 
I/O and the other doing CPU work?

now the clock time taken to complete execute both instructions is 11 since the cpu doesn't switch to executing the next process when 
the first process is blocked due to IO being issued.

Q5. Now, run the same processes, but with the switching behavior set to switch to another process whenever one is WAITING for I/O 
(-l 1:0,4:100 -c -S SWITCH ON IO). What happens now? Use -c and -p to confirm that you are right.

i think that the clock time needed to execute both processes will now be 7 again since the cpu will start executing the next process once
the first process moves into blocked state due to an IO call being issued.

Q5. One other important behavior is what to do when an I/O completes. With -I IO_RUN_LATER, when an I/O completes,the process that issued
it is not necessarily run right away; rather, whatever was running at the time keeps running. What happens when you run this combination 
of processes? (Run ./process-run.py -l 3:0,5:100,5:100,5:100 -S SWITCH_ON_IO -I IO_RUN_LATER -c -p) Are system resources being effectively
utilized?

no because effectively all of the cpu only processes are run immediately after the first IO instruction enters into blocked state. I think
it would be more effective to use IO_RUN_IMMEDIATE because it less time would taken to complete execution of all processes.

Q6. Now run the same processes, but with -I IO RUN IMMEDIATE set, which immediately runs the process that issued the I/O. How does this 
behavior differ? Why might running a process that just completed an I/O again be a good idea?

once an IO instruction becomes unblocked, the cpu resumes execution of the IO process execution which goes into blocked state again
and results in another CPU only process being executed in the meantime. This process keeps going until all the processes have been
executed.

Q7. Now run with some randomly generated processes: -s 1 -l 3:50,3:50 or -s 2 -l 3:50,3:50 or -s 3 -l 3:50,3:50. See if you can predict
how the trace will turn out. What happens when you use the flag -I IO_RUN_IMMEDIATE vs. -I IO_RUN_LATER? What happens when you use -S 
SWITCH_ON_IO vs. -S SWITCH_ON_END?

switch_on_end flag causes the total time spent executing the processes to increase because whilst an IO instruction is in blocked state
the cpu cannot execute a cpu only instruction. otherwise the other combinations use the same amount of cpu time.


